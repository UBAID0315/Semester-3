#include<iostream>
using namespace std;

class list
{
    public:
        int *arr;
        int *curr;
        int length;
        int capacity;
 
        list(int cap);
         ~list();

        void tail();   
        void head();            
        void back();            
        void next();            
        void Clear();
        void Insert(int val, int pos);         
        void CreateList();
        void Print();
        int Length();
        bool is_Empty();
        void Remove(int pos);
        int Get(int pos);
        void SortedInsert(int val);
};

void list::SortedInsert(int val)
{
    for (int i = 0; i < capacity - 1; ++i) 
    {
        for (int j = 0; j < capacity - i - 1; ++j) 
        {
            if (arr[j] > arr[j + 1]) 
            {
                // Swap the elements if they are in the wrong order
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    int i;
    if(capacity == length)
    {
        cout<<"Full"<<endl;
    }
    head();
    for(i=1 ; i<=length-1 ; i++ )
    {
        next();
    }
    if (*curr > val)
    {
        *(curr+1) = *curr;
        back();// Insert(val,i);
        *(curr+1)= val;
    }
}
void list::Remove(int pos)
{
    if (length == 0)
    {
        cout<<"Nothing is in list to remove"<<endl;
    }
    if (pos < 1 || pos > length + 1)
    {
        cout<<"Invalid position"<<endl;
    }
    if (pos >= 1 || pos <= length)
    {
        curr = arr + pos - 1;

        for (int i = pos; i <= length; i++)
        {
            *curr = *(curr + 1);
            next();        
        }        
        length--;
    }
}
int list::Get(int pos)
{
    curr = arr + pos - 1;
    return *curr;
}
list::list(int cap)
{
    arr = NULL;
    curr = NULL;
    capacity = cap;
    length = 0;
}
list::~list()
{
	delete []arr;
}
void list::tail()
{
    curr = arr + length - 1;
}
void list::back()
{
    curr--;
}
void list::next()
{
    curr++;
}
void list::head()
{
    curr = arr;
}
void list::CreateList()
{
    cout<<"Enter the capacity of list: ";
    cin>>capacity;

    arr = new int[capacity];
    for (int i = 0; i < capacity; i++)
    {
        arr[i] = 0;
    }
    
    curr = arr;
}
void list::Insert(int val, int pos)
{
	
    if (length == capacity)
    {
        cout<<"The list size is already FULL"<<endl;   
    }
    if (pos >= 0 || pos <= length)
    {
        tail();
        for (int i = length; i >= pos; i--)
        {
            *(curr+1) = *curr;
            back();
        }
        *(curr+1) = val;
        length++;
    }
}
int list::Length()
{
    return length;
}
void list::Print()
{
	head();
	for(int i=1 ; i <= length ; i++)
	{
		cout<<*curr<<" ";
		curr++;
	}
}
bool list::is_Empty()
{
    if (length == 0)
    {
        return 1;
    }
    else 
    {return 0;}
}
// -----------------------------------( C L A S S     S T A C K )------------------------------
class Stack : public list
{
    private:
        int top;
    public:
        Stack(int cap) : list(cap)
        {
            top = 0;
        }
        
        bool isEmpty();
        void push(int val);
        int pop();
        void peek();
        void display();
};

bool Stack::isEmpty()
{
    if(top==-1)
    {
        cout<<"Stack is empty"<<endl;
        return true;
    }
    else
    {
        return false;
    }
}
void Stack::peek()
{
    if(!isEmpty())
    {
        cout<<"Peeking into the stack (accessing top element)"<<endl;
        cout<<arr[top]<<endl;
    }
}
void Stack::push(int val)
{
    if (top < capacity)
    {
        Insert(val, top);
        top++;
    }
    else
    {
        cout << "Stack is full. Cannot push " << val << endl;
    }
}
int Stack::pop()
{
    if (!is_Empty() && top > 0)
    {
        top--;
        return Get(top);
        Remove(top);
    }
    else
    {
        cout << "Stack is empty. Cannot pop." << endl;
        return -1;
    }
}

int main()
{
    Stack S(5);

    S.CreateList();
    S.push(5);
    S.push(10);
    S.push(15);

    cout<<"pop: "<<S.pop();
    cout<<"pop: "<<S.pop();
    cout<<"pop: "<<S.pop();

    return 0;
}
